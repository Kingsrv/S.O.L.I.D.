A Solid Guide to SOLID Principles -

    The SOLID principles were introduced by Robert C. Martin in his 2000 paper
    “Design Principles and Design Patterns.”
    These concepts were later built upon by Michael Feathers,
    who introduced us to the SOLID acronym. And in the last 20 years,
    these five principles have revolutionized the world of object-oriented programming,
    changing the way that we write software.

    So, what is SOLID and how does it help us write better code?
    Simply put, Martin and Feathers' design principles encourage us to create more maintainable,
    understandable, and flexible software. Consequently,
    as our applications grow in size, we can reduce their complexity and
    save ourselves a lot of headaches further down the road!

    The following five concepts make up our SOLID principles:

    1. Single Responsibility - a class should only have one responsibility.
                               Furthermore, it should only have one reason to change.
    2. Open/Closed           - classes should be open for extension but closed for modification
    3. Liskov Substitution   - if class A is a subtype of class B,
                               we should be able to replace B with A without disrupting
                               the behavior of our program
    4. Interface Segregation - larger interfaces should be split into smaller ones.
                               By doing so, we can ensure that implementing classes only
                               need to be concerned about the methods that are of interest to them
    5. Dependency Inversion  - The principle of dependency inversion refers to the decoupling of software modules.
                               This way, instead of high-level modules depending on low-level modules,
                               both will depend on abstractions

